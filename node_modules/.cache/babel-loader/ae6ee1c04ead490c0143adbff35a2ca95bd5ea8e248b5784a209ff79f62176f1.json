{"ast":null,"code":"export default {\n  name: \"TaskList\",\n  data() {\n    return {\n      newTask: \"\",\n      // Campo de entrada para la nueva tarea\n      tasks: [] // Lista de tareas locales\n    };\n  },\n  mounted() {\n    this.fetchTasks(); // Cargar tareas automáticamente al montar el componente\n  },\n  methods: {\n    // Cargar tareas desde la API\n    async fetchTasks() {\n      try {\n        const response = await fetch(\"https://dummyjson.com/todos\");\n        const data = await response.json();\n        this.tasks = data.todos;\n      } catch (error) {\n        console.error(\"Error al cargar las tareas:\", error);\n      }\n    },\n    // Añadir nueva tarea\n    addTask() {\n      if (this.newTask.trim() === \"\") return;\n      const newTask = {\n        todo: this.newTask,\n        completed: false,\n        id: Date.now()\n      };\n\n      // Añadir la nueva tarea al inicio de la lista\n      this.tasks.unshift(newTask);\n      this.newTask = \"\"; // Limpiar el campo de entrada después de agregar\n    },\n    // Eliminar una tarea específica de la lista\n    deleteTask(task) {\n      this.tasks = this.tasks.filter(t => t.id !== task.id);\n    },\n    // Cambiar el estado de la tarea entre completada y no completada\n    toggleTaskCompletion(task) {\n      task.completed = !task.completed; // Cambiar el estado directamente\n    }\n  }\n};","map":{"version":3,"names":["name","data","newTask","tasks","mounted","fetchTasks","methods","response","fetch","json","todos","error","console","addTask","trim","todo","completed","id","Date","now","unshift","deleteTask","task","filter","t","toggleTaskCompletion"],"sources":["src/views/CombinedView.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <h1>Lista de Tareas</h1>\r\n\r\n        <div class=\"input-group\">\r\n            <input \r\n                v-model=\"newTask\" \r\n                @keyup.enter=\"addTask\" \r\n                placeholder=\"Añadir nueva tarea\" \r\n                class=\"task-input\" \r\n            />\r\n            <button @click=\"addTask\" class=\"add-button\">Añadir</button>\r\n        </div>\r\n    \r\n        <div v-if=\"tasks.length > 0\" class=\"task-list\">\r\n            <div v-for=\"task in tasks\" :key=\"task.id\" class=\"task-item\">\r\n                <div class=\"task-info\">\r\n                    <h3 :class=\"{ completed: task.completed }\">{{ task.todo }}</h3>\r\n                    <span class=\"task-status\" :class=\"{ 'pending': !task.completed, 'completed': task.completed }\">\r\n                        {{ task.completed ? 'Completada' : 'Pendiente' }}\r\n                    </span>\r\n                </div>\r\n                <div class=\"task-actions\">\r\n                    <button class=\"complete-btn\" @click=\"toggleTaskCompletion(task)\">\r\n                        {{ task.completed ? 'Desmarcar' : 'Completar' }}\r\n                    </button>\r\n                    <button class=\"delete-btn\" @click=\"deleteTask(task)\">Eliminar</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: \"TaskList\",\r\n    data() {\r\n        return {\r\n            newTask: \"\", // Campo de entrada para la nueva tarea\r\n            tasks: [],   // Lista de tareas locales\r\n        };\r\n    },\r\n    mounted() {\r\n        this.fetchTasks(); // Cargar tareas automáticamente al montar el componente\r\n    },\r\n    methods: {\r\n        // Cargar tareas desde la API\r\n        async fetchTasks() {\r\n            try {\r\n                const response = await fetch(\"https://dummyjson.com/todos\");\r\n                const data = await response.json();\r\n                this.tasks = data.todos;\r\n            } catch (error) {\r\n                console.error(\"Error al cargar las tareas:\", error);\r\n            }\r\n        },\r\n        \r\n        // Añadir nueva tarea\r\n        addTask() {\r\n            if (this.newTask.trim() === \"\") return;\r\n\r\n            const newTask = {\r\n                todo: this.newTask,\r\n                completed: false,\r\n                id: Date.now(), \r\n            };\r\n\r\n            // Añadir la nueva tarea al inicio de la lista\r\n            this.tasks.unshift(newTask);\r\n            this.newTask = \"\"; // Limpiar el campo de entrada después de agregar\r\n        },\r\n\r\n        // Eliminar una tarea específica de la lista\r\n        deleteTask(task) {\r\n            this.tasks = this.tasks.filter((t) => t.id !== task.id);\r\n        },\r\n\r\n        // Cambiar el estado de la tarea entre completada y no completada\r\n        toggleTaskCompletion(task) {\r\n            task.completed = !task.completed; // Cambiar el estado directamente\r\n        },\r\n    },\r\n};\r\n</script>\r\n<style scoped>\r\n.container {\r\n    max-width: 600px;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n}\r\n\r\nh1 {\r\n    font-size: 3em;\r\n    color: rgb(0, 0, 0);\r\n    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    margin: 5px;\r\n    cursor: pointer;\r\n    border: none;\r\n    border-radius: 5px;\r\n    font-size: 1em;\r\n}\r\n\r\n.load-btn {\r\n    background-color: #a24fe6;\r\n    color: rgb(0, 0, 0);\r\n}\r\n\r\n.task-list {\r\n    margin-top: 20px;\r\n}\r\n\r\n.task-item {\r\n    background-color: #f9f9f9;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    border-radius: 5px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n.task-info {\r\n    flex-grow: 1;\r\n}\r\n\r\n.task-actions {\r\n    display: flex;\r\n    gap: 10px;\r\n}\r\n\r\nh3 {\r\n    color: #333; \r\n}\r\n\r\nh3.completed {\r\n    text-decoration: line-through; \r\n}\r\n\r\n.task-status {\r\n    display: inline-block;\r\n    padding: 5px 10px;\r\n    border-radius: 5px;\r\n    font-weight: bold;\r\n    margin-left: 10px;\r\n}\r\n\r\n.pending {\r\n    background-color: rgb(230, 169, 58); \r\n    color: white;\r\n}\r\n\r\n.completed {\r\n    background-color: rgb(219, 78, 212); \r\n    color: rgb(0, 0, 0);\r\n}\r\n\r\n.complete-btn {\r\n    background-color: #e43c7c; \r\n    color: white;\r\n    padding: 10px 15px;\r\n    border-radius: 5px;\r\n    border: none;\r\n    cursor: pointer;\r\n}\r\n\r\n.complete-btn:hover {\r\n    background-color: #e944c5; \r\n}\r\n\r\n.delete-btn {\r\n    background-color: #e20017; \r\n    color: white;\r\n    padding: 10px 15px;\r\n    border-radius: 5px;\r\n    border: none;\r\n    cursor: pointer;\r\n}\r\n\r\n.delete-btn:hover {\r\n    background-color: #be535e; \r\n}\r\n</style>"],"mappings":"AAkCA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MAAA;MACAC,KAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,UAAA;EACA;EACAC,OAAA;IACA;IACA,MAAAD,WAAA;MACA;QACA,MAAAE,QAAA,SAAAC,KAAA;QACA,MAAAP,IAAA,SAAAM,QAAA,CAAAE,IAAA;QACA,KAAAN,KAAA,GAAAF,IAAA,CAAAS,KAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,gCAAAA,KAAA;MACA;IACA;IAEA;IACAE,QAAA;MACA,SAAAX,OAAA,CAAAY,IAAA;MAEA,MAAAZ,OAAA;QACAa,IAAA,OAAAb,OAAA;QACAc,SAAA;QACAC,EAAA,EAAAC,IAAA,CAAAC,GAAA;MACA;;MAEA;MACA,KAAAhB,KAAA,CAAAiB,OAAA,CAAAlB,OAAA;MACA,KAAAA,OAAA;IACA;IAEA;IACAmB,WAAAC,IAAA;MACA,KAAAnB,KAAA,QAAAA,KAAA,CAAAoB,MAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAP,EAAA,KAAAK,IAAA,CAAAL,EAAA;IACA;IAEA;IACAQ,qBAAAH,IAAA;MACAA,IAAA,CAAAN,SAAA,IAAAM,IAAA,CAAAN,SAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}